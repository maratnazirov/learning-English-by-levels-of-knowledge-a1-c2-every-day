# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def handle_reset_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        choice = update.message.text

        if choice == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
            success = await reset_user_progress(user_id)
            if success:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn = sqlite3.connect(DB_NAME)
                cursor = conn.cursor()
                cursor.execute("SELECT level FROM users WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()
                conn.close()

                if result:
                    level = result[0]
                    words = await send_words_to_user(user_id, level, context.bot)
                    save_sent_words(user_id, words)

                    await update.message.reply_text(
                        "üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞–Ω–æ–≤–æ.\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞."
                    )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        elif choice == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å":
            await update.message.reply_text(
                "üéâ –û—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å\n"
                "–ò–ª–∏ /reset —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–Ω–æ–≤–æ"
            )

    except Exception as e:
        logging.error(f"Error in handle_reset_choice: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT level FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()

        if not result:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return

        level = result[0]
        success = await reset_user_progress(user_id)

        if success:
            words = await send_words_to_user(user_id, level, context.bot)
            save_sent_words(user_id, words)

            await update.message.reply_text(
                f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è {level} —Å–±—Ä–æ—à–µ–Ω!\n"
                "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –∑–∞–Ω–æ–≤–æ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.\n "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10 —Å–ª–æ–≤ —Å—Ä–∞–∑—É –∂–µ"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logging.error(f"Error in reset command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        help_text = (
            "ü§ñ English Words Bot - –ü–æ–º–æ—â—å\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n"
            "/send - –ü–æ–ª—É—á–∏—Ç—å 10 —Å–ª–æ–≤ —Å–µ–π—á–∞—Å\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/reset - –ù–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞–Ω–æ–≤–æ\n"
            "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
            "üìö –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç 10 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00"
        )
        await update.message.reply_text(help_text)
    except Exception as e:
        logging.error(f"Error in help command: {e}")


# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
async def send_daily_words(context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, level FROM users WHERE subscribe = 1")
        users = cursor.fetchall()

        for user_id, level in users:
            try:
                cursor.execute("SELECT last_sent FROM users WHERE user_id = ?", (user_id,))
                result = cursor.fetchone()

                if result and result[0]:
                    last_sent = datetime.strptime(result[0], "%Y-%m-%d").date()
                    if datetime.now().date() <= last_sent:
                        continue

                words = await send_words_to_user(user_id, level, context.bot)
                if words is not None:  # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã
                    save_sent_words(user_id, words)

            except Exception as e:
                logging.error(f"Error sending to user {user_id}: {e}")

        conn.close()
    except Exception as e:
        logging.error(f"Error in send_daily_words: {e}")
