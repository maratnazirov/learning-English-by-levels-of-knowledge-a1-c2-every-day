async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET subscribe = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "‚è∏Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/start - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
            "/send - –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–µ–π—á–∞—Å\n"
            "/reset - –Ω–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞–Ω–æ–≤–æ\n"
            "/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
        )
    except Exception as e:
        logging.error(f"Error in stop command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT level, subscribe FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        
        if result:
            level, subscribe = result
            status_text = "–∞–∫—Ç–∏–≤–Ω–∞" if subscribe else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
            cursor.execute("SELECT COUNT(DISTINCT word) FROM user_words WHERE user_id = ?", (user_id,))
            learned_count = cursor.fetchone()[0]
            total_count = len(WORDS.get(level, []))
            
            conn.close()
            
            await update.message.reply_text(
                f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
                f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
                f"‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞: {status_text}\n"
                f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned_count}/{total_count}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"/send - –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–µ–π—á–∞—Å\n"
                f"/reset - –Ω–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞–Ω–æ–≤–æ"
            )
        else:
            conn.close()
            await update.message.reply_text(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
            )
    except Exception as e:
        logging.error(f"Error in status command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def send_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT level FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            level = result[0]
            words = await send_words_to_user(user_id, level, context.bot)
            if words is not None:  
                save_sent_words(user_id, words)
                
            if words:
                await update.message.reply_text("‚úÖ –°–ª–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª–æ–≤")
        else:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
            )
    except Exception as e:
        logging.error(f"Error in send_now command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
